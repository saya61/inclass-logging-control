<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--  로그를 지정하는 2가지 위치에 대해서 Appender 선언  -->

    <!--  0. Spring Boot 기본 콘솔 로그 출력을 그대로 유지하기!  -->
    <SpringProfile name="default">
        <!--  CONSOLE & FILE Appender 기본 정의 불러오기  -->
        <include resource="org/springframework/boot/logging/logback/base.xml"/>
    </SpringProfile>

<!--    &lt;!&ndash;  1. ConsoleAppender  &ndash;&gt;-->
<!--    &lt;!&ndash;  appender : 로그를 기록할 때 상세 설정을 담당하는 태그 (출력 및 저장)  &ndash;&gt;-->
<!--    &lt;!&ndash;  appender = LogHandler, Handler 등으로도 부름  &ndash;&gt;-->
<!--    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
<!--            &lt;!&ndash;  Thread 명 / Class 명  &ndash;&gt;-->
<!--&lt;!&ndash;            <pattern>%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n</pattern>&ndash;&gt;-->
<!--            <pattern>%-5level %d{yy-MM-dd HH:mm:ss} - %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!--  2. FileAppender  (RollingFileAppender)-->
    <!--  Rolling : 짤라서 저장 -->
    <!--  테스트용 파일 어펜더 (root logger 에 적용해서 확인)  -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/spring-application.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/spring-application.%d{yyyy-MM-dd_HH-mm}.log</fileNamePattern>  <!--  minutely  -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>%-5level %d{yy-MM-dd HH:mm:ss} - %msg%n</pattern>-->
        </encoder>
    </appender>

    <appender name="LOGCONTROLLER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/logcotroller.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  롤링 주기를 아래와 같이 날짜 패턴 선언만으로 제어할 수 있음 (하나만 선택)  -->
            <!--            <fileNamePattern>logs/logcotroller.%d{yyyy-MM}.log</fileNamePattern>  &lt;!&ndash;  monthly  &ndash;&gt;-->
            <!--            <fileNamePattern>logs/logcotroller.%d{yyyy-MM-dd}.log</fileNamePattern>  &lt;!&ndash;  daily  &ndash;&gt;-->
            <!--            <fileNamePattern>logs/logcotroller.%d{yyyy-MM-dd_HH}.log</fileNamePattern>  &lt;!&ndash;  hourly  &ndash;&gt;-->
            <fileNamePattern>logs/logcotroller.%d{yyyy-MM-dd_HH-mm}.log</fileNamePattern>  <!--  minutely  -->

            <!--  로그 보관 개수와 기간 정의 가능-->
            <!-- keep 30 days' worth of history capped at 3GB total size -->
            <maxHistory>30</maxHistory>
            <!--  로그 파일의 최대 용량 정의 가능 - 3GB 이상이 되면 주기 상관없이 롤링 -->
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>%-5level %d{yy-MM-dd HH:mm:ss} - %msg%n</pattern>-->
            <!--            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
        </encoder>
    </appender>

    <!-- root 는 기본 logger -->
    <root level="INFO">
    <!--  위에 있는 CONSOLE 을 참조 -->
        <appender-ref ref="CONSOLE"/>
        <!--  FILE 로그도 함께 찍어서 향후 디버깅에 활용  -->
        <appender-ref ref="FILE"/>
    </root>

    <!--  logger 는 로그 기록의 상위 설정 (기록 단위)  -->
    <!--  logger 아래에 Handler 가 사용되는 구조로 파악-->
    <!--  logger 커스텀 선언  -->
    <!--  디버깅이 아닌 분석용이라 INFO 레벨로 설정  -->
    <!--  name : 패키지 또는 클래스 FULL PATH  -->
    <logger  level="INFO"
                name="ac.su.kdt.inclassloggingcontrol.controller.LogController"
                additivity="false"> <!--  additivity 는 상위 패키지 로그 전파 여부  -->
        <appender-ref ref="LOGCONTROLLER"/>
        <appender-ref ref="cONSOLE"/>
    </logger>
</configuration>